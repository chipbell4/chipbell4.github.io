#!/usr/bin/env node
const fs = require("fs");
const path = require("path");

/**
 * A helper function to log and exit when a failure occurs
 */
function failWithUsageMessage() {
  console.log("Usage:\n  jsify path/to/input.ext output/directory");
  process.exit(0);
}

// Verify that the user provided the right number of args
if (process.argv.length < 4) {
  failWithUsageMessage();
}

// Get the absolute path to the inputs provided
const inputFile = path.resolve(process.argv[2]);
const outputDirectory = path.resolve(process.argv[3]);

// This array contains a list of any validation errors we found when attempting
// check that the input file and output directory exist
let errors = [];

// confirm that the input file exists and is a file
const inputStats = fs.statSync(inputFile, { throwIfNoEntry: false });
if (inputStats === undefined) {
  errors.push(`Provided file ${process.argv[2]} doesn't exist`);
} else if (!inputStats.isFile()) {
  errors.push(`Provided file ${process.argv[2]} is not a file`);
}

// confirm that the output file exists and is a directory
const outputStats = fs.statSync(outputDirectory, { throwIfNoEntry: false });
if (outputStats === undefined) {
  errors.push(`Provided output directory ${process.argv[3]} doesn't exist`);
} else if (!outputStats.isDirectory()) {
  errors.push(
    `Provided output directory ${process.argv[3]} is not a directory`
  );
}

// if we encountered any errors, log them then bail out
if (errors.length > 0) {
  console.warn("Error:");
  errors.forEach((message) => console.warn("  " + message));
  failWithUsageMessage();
}

const newFileName = path.basename(inputFile) + ".js";
const newFullPath = path.join(outputDirectory, newFileName);

const contents = fs.readFileSync(inputFile, { encoding: "utf8" });
const outputContents = `export const contents = ${JSON.stringify(contents)};`;
fs.writeFileSync(newFullPath, outputContents);
